// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?        @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  conservationIds String[]       @db.ObjectId
  conservations   Conservation[] @relation(fields: [conservationIds], references: [id])
  accounts        Account[]
  messages        Message[]
  seenMessages    Message[]      @relation("seen", fields: [seenMessageIds], references: [id])
  seenMessageIds  String[]       @db.ObjectId
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Conservation {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  createAt      DateTime  @default(now())
  lastMessageAt DateTime  @default(now())
  name          String?
  isGroup       Boolean?
  messages      Message[]
  userIds       String[]  @db.ObjectId
  user          User[]    @relation(fields: [userIds], references: [id])
}

model Message {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  body           String?
  image          String?
  createAt       DateTime      @default(now())
  seenIds        String[]      @db.ObjectId
  seen           User[]        @relation("seen", fields: [seenIds], references: [id])
  senderId       String        @db.ObjectId
  sender         User          @relation(fields: [senderId], references: [id], onDelete: Cascade)
  Conservation   Conservation? @relation(fields: [conservationId], references: [id])
  conservationId String?       @db.ObjectId
}
